<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DapperHelper</name>
    </assembly>
    <members>
        <member name="T:DapperHelpers.Core.Enum.DBStatus">
            <summary>
            数据库操作状态
            </summary>
            <remarks>
            Author：Willis
            <para>Version: v1.6.0.1</para>
            </remarks>
        </member>
        <member name="F:DapperHelpers.Core.Enum.DBStatus.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:DapperHelpers.Core.Enum.DBStatus.Abnormal">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:DapperHelpers.Core.Enum.DBStatus.Failure">
            <summary>
            失败
            </summary>
        </member>
        <member name="T:DapperHelpers.Core.Enum.DBType">
            <summary>
            数据库类型枚举
            </summary>
            <remarks>
            Author：Willis
            <para>Version: v1.6.0.1</para>
            </remarks>
        </member>
        <member name="F:DapperHelpers.Core.Enum.DBType.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:DapperHelpers.Core.Enum.DBType.SqlServer">
            <summary>
            SqlServer
            </summary>
        </member>
        <member name="F:DapperHelpers.Core.Enum.DBType.OleDb">
            <summary>
            OleDb 
            </summary>
        </member>
        <member name="F:DapperHelpers.Core.Enum.DBType.Odbc">
            <summary>
            Odbc
            </summary>
        </member>
        <member name="F:DapperHelpers.Core.Enum.DBType.MySql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="F:DapperHelpers.Core.Enum.DBType.Sqlite">
            <summary>
            Sqlite
            </summary>
        </member>
        <member name="F:DapperHelpers.Core.Enum.DBType.PostgreSql">
            <summary>
            PostgreSql
            </summary>
        </member>
        <member name="T:DapperHelpers.Core.Extensions.DataTableExtensions">
            <summary>
             DataTable扩展方法
            </summary>
            <remarks>
            Author：Willis
            <para>Version: v1.6.0.1</para>
            </remarks>
        </member>
        <member name="M:DapperHelpers.Core.Extensions.DataTableExtensions.FirstRow(System.Data.DataTable)">
            <summary>
            获取 DataTable 的第一行数据。
            </summary>
            <param name="table">需要操作的 DataTable。</param>
            <returns>DataTable 的第一行数据,如果 DataTable 为空或没有行，则返回 null。</returns>
        </member>
        <member name="T:DapperHelpers.Core.Extensions.ListExtensions">
            <summary>
            List集合扩展方法
            </summary>
            <remarks>
            Author：Willis
            <para>Version: v1.6.0.1</para>
            </remarks>
        </member>
        <member name="M:DapperHelpers.Core.Extensions.ListExtensions.IsEmptyAddDefalutItem``1(System.Collections.Generic.List{``0})">
            <summary>
            List集合如果Count等于零，则添加一个默认类型的Item，避免包含IN关键字SQL执行异常
            </summary>
            <typeparam name="T">List类型（String，int）</typeparam>
            <param name="data"></param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:DapperHelpers.Core.Extensions.ListExtensions.ParamIsListEmpty(System.Object@)">
            <summary>
            Dapper param 预处理，修改List Count等于零的情况
            </summary>
            <param name="param"></param>
        </member>
        <member name="T:DapperHelpers.Core.Models.UserCommand">
            <summary>
            UserCommand
            </summary>
            <remarks>
            Author：Willis
            <para>Version: v1.6.0.1</para>
            </remarks>
        </member>
        <member name="P:DapperHelpers.Core.Models.UserCommand.CommandText">
            <summary>
            执行SQL
            </summary>
        </member>
        <member name="P:DapperHelpers.Core.Models.UserCommand.Parameters">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="M:DapperHelpers.Core.Models.UserCommand.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="commandText"></param>
        </member>
        <member name="M:DapperHelpers.Core.Models.UserCommand.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="commandText"></param>
            <param name="userObjectParameter"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DapperHelpers.Core.Models.UserCommand.SetParameter``1(System.String,``0,System.Object)">
            <summary>
            用於设置SQL参数, 提供方法实现逐个参数进行传参，可以传递列表参数
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:DapperHelpers.Core.Models.UserCommands">
            <summary>
            命令集合
            </summary>
            <remarks>
            Author：Willis
            <para>Version: v1.6.0.1</para>
            </remarks>
        </member>
        <member name="F:DapperHelpers.Core.Models.UserCommands.userCommands">
            <summary>
            命令集合
            </summary>
        </member>
        <member name="P:DapperHelpers.Core.Models.UserCommands.Count">
            <summary>
            userCommands 命令集合的个数
            </summary>
        </member>
        <member name="M:DapperHelpers.Core.Models.UserCommands.Add(System.String,System.Boolean)">
            <summary>
            添加一个SQL
            </summary>
            <param name="commandText"></param>
            <param name="keepSemicolon">是否在SQL结束地方保留分号 ； </param>
        </member>
        <member name="M:DapperHelpers.Core.Models.UserCommands.Add(DapperHelpers.Core.Models.UserCommand,System.Boolean)">
            <summary>
            添加一个参数化SQL
            </summary>
            <param name="userCommand"></param>
            <param name="keepSemicolon">是否在SQL结束地方保留分号 ； </param>
        </member>
        <member name="M:DapperHelpers.Core.Models.UserCommands.AddRange(DapperHelpers.Core.Models.UserCommands)">
            <summary>
            批量添加参数化SQL
            </summary>
            <param name="commands"></param>
        </member>
        <member name="M:DapperHelpers.Core.Models.UserCommands.AsEnumerable">
            <summary>
            获取命令集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Models.UserCommands.CollectionToString">
            <summary>
            获取命令集合的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Models.UserCommands.Clear">
            <summary>
            清空命令集合
            </summary>
        </member>
        <member name="T:DapperHelpers.Core.Models.UserParameter">
            <summary>
            用户参数
            </summary>
            <remarks>
            Author：Willis
            <para>Version: v1.6.0.1</para>
            </remarks>
        </member>
        <member name="P:DapperHelpers.Core.Models.UserParameter.Name">
            <summary>
            参数名
            </summary>
        </member>
        <member name="P:DapperHelpers.Core.Models.UserParameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:DapperHelpers.Core.Models.UserParameter.IsEnumerable">
            <summary>
            是否是集合
            </summary>
        </member>
        <member name="F:DapperHelpers.Core.Models.UserParameter.paramType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="M:DapperHelpers.Core.Models.UserParameter.#ctor(System.Type,System.String,System.Object,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:DapperHelpers.Core.Models.UserParameter.Load(DapperHelpers.Core.Models.UserParameter)">
            <summary>
            加载
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:DapperHelpers.Core.Models.UserParameter.ParamType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="T:DapperHelpers.Core.Repositories.DBFactory">
            <summary>
            数据库连接工厂
            </summary>
            <remarks>
            Author：Willis
            <para>Version: v1.6.0.1</para>
            </remarks>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.DBFactory.CreateConnection">
            <summary>
            创建数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.DBFactory.CreateConnection(DapperHelpers.Core.Repositories.DBProvider)">
            <summary>
            创建数据库连接,指定数据库 <see cref="T:DapperHelpers.Core.Repositories.DBProvider"/>
            </summary>
            <param name="providers"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.DBFactory.CreateConnection(System.String)">
            <summary>
            创建数据库连接,指定数据库连接字符串
            </summary>
            <param name="settingConnectionString"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.DBFactory.CreateConnection(DapperHelpers.Core.Enum.DBType,DapperHelpers.Core.Repositories.DBProvider)">
            <summary>
            创建数据库连接,数据库类型 <see cref="T:DapperHelpers.Core.Enum.DBType"/> 和指定数据库 <see cref="T:DapperHelpers.Core.Repositories.DBProvider"/>
            </summary>
            <param name="dBType"></param>
            <param name="providers"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.DBFactory.CreateConnection(DapperHelpers.Core.Enum.DBType,System.String)">
            <summary>
            创建数据库连接,指定数据库地址settingConnectionString，和数据库类型 <see cref="T:DapperHelpers.Core.Enum.DBType"/>
            </summary>
            <param name="dBType"></param>
            <param name="settingConnectionString"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.DBFactory.TryGetConnectionString(DapperHelpers.Core.Repositories.DBProvider)">
            <summary>
            获取数据库连接字符串 
            </summary>
            <param name="providers"></param>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationException"></exception>
        </member>
        <member name="T:DapperHelpers.Core.Repositories.DBProvider">
            <summary>
            数据库类型
            </summary>
            <remarks>
            Author：Willis
            <para>Version: v1.6.0.1</para>
            </remarks>
        </member>
        <member name="F:DapperHelpers.Core.Repositories.DBProvider.MESCon">
            <summary>
            MES DB
            </summary>
        </member>
        <member name="F:DapperHelpers.Core.Repositories.DBProvider.LogCon">
            <summary>
            Log DB
            </summary>
        </member>
        <member name="F:DapperHelpers.Core.Repositories.DBProvider.ODSCon">
            <summary>
            ODS DB
            </summary>
        </member>
        <member name="F:DapperHelpers.Core.Repositories.DBProvider.MESOtherCon">
            <summary>
            MES Other DB
            </summary>
        </member>
        <member name="T:DapperHelpers.Core.Repositories.IRepository`1">
            <summary>
            仓储接口
            </summary>
            <remarks>
            Author：Willis
            <para>Version: v1.6.0.1</para>
            </remarks>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Get(System.Object)">
            <summary>
            根据表主键获取数据
            </summary>
            <param name="key">表主键</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.GetAll">
            <summary>
            获取表所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Insert(`0)">
            <summary>
            插入一条数据
            </summary>
            <param name="entityToInsert">待插入表实体类</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Update(`0)">
            <summary>
            更新一条数据
            </summary>
            <param name="entityToUpdate">待更新表实体类</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Delete(`0)">
            <summary>
            删除一条数据
            </summary>
            <param name="entityToDelete">待删除表实体类</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Get(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键获取实体数据
            </summary>
            <param name="key">主键值</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.GetAsync(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键获取实体数据
            </summary>
            <param name="key">主键值</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Get``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键获取实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="key">主键值</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.GetAsync``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键获取实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="key">主键值</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.GetAll(System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取所有数据
            </summary>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.GetAllAsync(System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取所有数据
            </summary>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.GetAll``1(System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取所有数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.GetAllAsync``1(System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取所有数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Insert(`0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            新增实体数据
            </summary>
            <param name="entityToInsert">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>成功插入条数</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.InsertAsync(`0,System.Data.IDbTransaction,System.Nullable{System.Int32},ISqlAdapter)">
            <summary>
            新增实体数据
            </summary>
            <param name="entityToInsert">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="sqlAdapter"></param>
            <returns>成功插入条数</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Insert``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            新增实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entityToInsert">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>成功插入条数</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.InsertAsync``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32},ISqlAdapter)">
            <summary>
            新增实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entityToInsert">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="sqlAdapter"></param>
            <returns>成功插入条数</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Update(`0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            修改实体数据
            </summary>
            <param name="entityToUpdate">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.UpdateAsync(`0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            修改实体数据
            </summary>
            <param name="entityToUpdate">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Update``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            修改实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entityToUpdate">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.UpdateAsync``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            修改实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entityToUpdate">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Delete(`0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除实体数据
            </summary>
            <param name="entityToDelete">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Delete``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entityToDelete">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.DeleteAsync``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entityToDelete">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Execute(System.String,System.Object)">
            <summary>
            执行sql语句,用于增删改查
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <returns>返回执行sql后受影响的行数</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.ExecuteAsync(System.String,System.Object)">
            <summary>
            执行sql语句,用于增删改查
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <returns>返回执行sql后受影响的行数</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Execute(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行sql命令,用于增删改查
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回执行sql后受影响的行数</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.ExecuteAsync(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行sql命令,用于增删改查
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回执行sql后受影响的行数</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Query(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询数据,返回指定数据类型
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回指定数据类型的数据序列</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryAsync(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询数据,返回指定数据类型
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回指定数据类型的数据序列</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Query``1(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询数据,返回指定数据类型
            </summary>
            <typeparam name="T">返回数据的类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回指定数据类型的数据序列</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryAsync``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询数据,返回指定数据类型
            </summary>
            <typeparam name="T">返回数据的类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回指定数据类型的数据序列</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryFirst``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询并将第一个结果映射到指定类型对象,无结果则抛出异常
            </summary>
            <typeparam name="T">指定类型对象</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回查询结果集的第一个结果</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryFirstAsync``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询并将第一个结果映射到指定类型对象,无结果则抛出异常
            </summary>
            <typeparam name="T">指定类型对象</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回查询结果集的第一个结果</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryFirstOrDefault``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询并将第一个结果映射到指定类型对象,无结果返回默认值
            </summary>
            <typeparam name="T">指定类型对象</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回查询结果集的第一个结果</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryFirstOrDefaultAsync``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询并将第一个结果映射到指定类型对象,无结果返回默认值
            </summary>
            <typeparam name="T">指定类型对象</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回查询结果集的第一个结果</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryIn(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询数据,返回指定数据类型
            <para>QueryIn 该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零</para>
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回指定数据类型的数据序列</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryAsyncIn(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询数据,返回指定数据类型
            <para>QueryAsyncIn 该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零</para>
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回指定数据类型的数据序列</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryIn``1(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询数据,返回指定数据类型
            <para>QueryIn 该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零</para>
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回指定数据类型的数据序列</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryAsyncIn``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询数据,返回指定数据类型
            <para>QueryAsyncIn 该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零</para>
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回指定数据类型的数据序列</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryFirstIn``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询并将第一个结果映射到指定类型对象,无结果则抛出异常
            <para>QueryFirstIn 该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零</para>
            </summary>
            <typeparam name="T">指定类型对象</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回查询结果集的第一个结果</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryFirstAsyncIn``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询并将第一个结果映射到指定类型对象,无结果则抛出异常
            <para>QueryFirstIn 该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零</para>
            </summary>
            <typeparam name="T">指定类型对象</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回查询结果集的第一个结果</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryFirstOrDefaultIn``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询并将第一个结果映射到指定类型对象,无结果返回默认值
            <para>QueryFirstOrDefaultIn 该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零</para>
            </summary>
            <typeparam name="T">指定类型对象</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回查询结果集的第一个结果</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryFirstOrDefaultAsyncIn``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询并将第一个结果映射到指定类型对象,无结果返回默认值
            <para>QueryFirstOrDefaultAsyncIn 该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零</para>
            </summary>
            <typeparam name="T">指定类型对象</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回查询结果集的第一个结果</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Query_DataTable(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Dapper 执行SQL返回DataTable类型
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Query_DataTableIn(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Query_DataTableIn 执行SQL返回DataTable类型,该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryDataTable(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Dapper 执行SQL返回DataTable类型
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryDataTableIn(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            QueryDataTableIn 执行SQL返回DataTable类型,该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Query_DataTableFirstRow(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Dapper 执行SQL返回DataTable第First行数据
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Query_DataTableInFirstRow(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Query_DataTableIn 执行SQL返回DataTable类型,该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryDataTableFirstRow(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Dapper 执行SQL返回DataTable类型
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryDataTableInFirstRow(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            QueryDataTableIn 执行SQL返回DataTable类型,该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryString(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            QueryString 执行SQL返回string类型的單個數據
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.QueryStringIn(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            QueryStringIn 执行SQL返回String类型的單個數據,该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.DapperExecuteBatch(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}})">
            <summary>
            (事务) 单条SQL，多次执行（每次执行传递数据不同），该方法执行SQL采用事务控制
            <para>
            默认调用MesCon连接字符串
            </para>
            </summary>
            <param name="sqlParamDir"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.DapperExecuteBatch(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}},System.String@)">
            <summary>
            (事务) 单条SQL，多次执行（每次执行传递数据不同），该方法执行SQL采用事务控制
            <para>
            默认调用MesCon连接字符串
            </para>
            <para>
            该方法执行出现错误，可以通过Out返回错误信息
            </para>
            </summary>
            <param name="sqlParamDir"></param>
            <param name="errorMsg">out 錯誤信息</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.BatchExecutionForeach(System.Collections.Generic.List{System.String})">
            <summary>
            (事务) SQL集合批量（循环）执行
            <para>
            return [Row] 表示执行成功返回受影响行数；[-1] 表示执行异常（回退异常）；
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <returns>执行状态</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.BatchExecutionForeach(System.Collections.Generic.List{System.String},System.String@)">
            <summary>
            (事务) SQL集合批量（循环）执行
            <para>
            return [Row] 表示执行成功返回受影响行数；[-1] 表示执行异常（回退异常）；
            </para>
            <para>
            该方法执行出现错误，可以通过Out返回错误信息
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <param name="errorMsg">异常内容</param>
            <returns>执行状态</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.BatchExecutionBeginEnd(System.Collections.Generic.List{System.String})">
            <summary>
            (事务) SQL集合拼接为字符串采用BeginEnd执行，SQL集合中的SQL必须以[;]结尾
            <para>
            return [1] 表示执行成功（提交事务）；[0] 表示执行异常（回退异常），出现异常可能为SQL集合中部分SQL语句错误
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <returns>执行状态</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.BatchExecutionBeginEnd(System.Collections.Generic.List{System.String},System.String@)">
            <summary>
            (事务) SQL集合拼接为字符串采用BeginEnd执行，SQL集合中的SQL必须以[;]结尾
            <para>
            return [1] 表示执行成功（提交事务）；[0] 表示执行异常（回退异常），出现异常可能为SQL集合中部分SQL语句错误
            </para>
            <para>
            该方法执行出现错误，可以通过Out返回错误信息
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <param name="errorMsg">异常错误信息</param>
            <returns>执行状态</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.BatchExecutionForeachNTS(System.Collections.Generic.List{System.String})">
            <summary>
            (无事务) SQL集合批量（循环）执行
            <para>
            return [Row] 表示执行成功返回受影响行数；执行出现异常将转抛异常
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <returns>执行完成受影响的行数</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.BatchExecutionBeginEndNTS(System.Collections.Generic.List{System.String})">
            <summary>
            (无事务) SQL集合拼接为字符串采用BeginEnd执行
            <para>
            return [1] 表示执行成功；执行异常将抛出异常信息
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <returns>执行状态</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.BatchExecutionForeachAsync(System.Collections.Generic.List{System.String})">
            <summary>
            (事务) SQL集合批量（循环）执行
            <para>
            return [Row] 表示执行成功返回受影响行数；[-1] 表示执行异常（回退异常）
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <returns>执行状态</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.BatchExecutionBeginEndAsync(System.Collections.Generic.List{System.String})">
            <summary>
            (事务) SQL集合拼接为字符串采用BeginEnd执行，SQL集合中的SQL必须以[;]结尾
            <para>
            return [1] 表示执行成功（提交事务）；[0] 表示执行异常（回退异常），出现异常可能为SQL集合中部分SQL语句错误
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <returns>执行状态</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.BatchExecutionForeachAsyncNTS(System.Collections.Generic.List{System.String})">
            <summary>
            (无事务) SQL集合批量（循环）执行
            <para>
            return [Row] 表示执行成功返回受影响行数；执行出现异常将转抛异常
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <returns>执行完成受影响的行数</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.BatchExecutionBeginEndAsyncNTS(System.Collections.Generic.List{System.String})">
            <summary>
            (无事务) SQL集合拼接为字符串采用BeginEnd执行，SQL集合中的SQL必须以[;]结尾
            <para>
            return [1] 表示执行成功；执行异常将抛出异常信息
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <returns>执行状态</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.ExecuteSqlListAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            (事务) ExecuteSqlListAsync,异步批量执行Sql List
            </summary>
            <param name="sqlList">SQLS对象集合</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.ExecuteSqlListAsyncResultRows(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            (事务) ExecuteSqlListAsyncResultRows,异步批量执行Sql List
            </summary>
            <param name="sqlList">SQLS对象集合</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.ExecuteSqlListAsyncNTS(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            (无事务) ExecuteSqlListAsync,异步批量执行Sql List，取消事务管理
            </summary>
            <param name="sqlList">SQLS对象集合</param>
            <returns>执行异常会抛出对应错误异常</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.ExecuteSqlListAsyncResultRowsNTS(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            (无事务) ExecuteSqlListAsyncResultRowsNTS,异步批量执行Sql List，取消事务管理，执行成功返回受影响的行数
            </summary>
            <param name="sqlList">SQLS对象集合</param>
            <returns>执行成功返回受影响的行数，执行异常会抛出对应错误异常</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.ExecuteProcedure(System.String,Dapper.DynamicParameters)">
            <summary>
            执行存储过程
            </summary>
            <param name="ProcName">存储过程名称</param>
            <param name="dynamicParameters">存储过程参数对象（包含input，output）</param>
            <returns>执行存储过程状态</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.ExecuteProcedure(System.String,Dapper.DynamicParameters,System.String@)">
            <summary>
            执行存储过程
            <para>
            该方法执行出现错误，可以通过Out返回错误信息
            </para>
            </summary>
            <param name="ProcName">存储过程名称</param>
            <param name="dynamicParameters">存储过程参数对象（包含input，output）</param>
            <param name="errorMsg"></param>
            <returns>执行存储过程状态</returns>
        </member>
        <member name="M:DapperHelpers.Core.Repositories.IRepository`1.Dispose">
            <summary>
            释放对象方法
            </summary>
        </member>
        <member name="T:DapperHelpers.Core.Utils.ConfigManager">
            <summary>
            web.config配置获取帮助类
            </summary>
            <remarks>
            Author：Willis
            <para>Version: v1.6.0.1</para>
            </remarks>
        </member>
        <member name="M:DapperHelpers.Core.Utils.ConfigManager.GetAppSettingString(System.String)">
            <summary>
            得到AppSettings中的配置字符串信息
            </summary>
            <param name="key">AppSettings节点add的name值</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.Core.Utils.ConfigManager.GetConnectionString(System.String)">
            <summary>
            得到ConnectionStrings中的配置字符串信息
            </summary>
            <param name="key">ConnectionString节点add的name值</param>
            <returns></returns>
        </member>
        <member name="T:DapperHelpers.DapperHelper`1">
            <summary>
            Dapper数据操作基类 v1.6.0.1
            </summary>
            <remarks>
            Author：Willis
            <para>Version: v1.6.0.1</para>
            </remarks>
            <typeparam name="TEntity">仓储实体</typeparam>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.#ctor">
            <summary>
            默认连接对象进行创建Oracle的Connection对象,默认使用<see cref="T:DapperHelpers.Core.Enum.DBType"/>下面的MESCon作为连接配置
            </summary>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.#ctor(DapperHelpers.Core.Repositories.DBProvider)">
            <summary>
            指定DBProvider进行创建Oracle的Connection对象
            <para>
            DBProvider(MESCon,InterfaceDB,MESLogCon,MESOtherCon)
            </para>
            </summary>
            <param name="providers"></param>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.#ctor(System.String)">
            <summary>
            指定数据库连接地址进行创建Connection对象
            </summary>
            <param name="settingConnectionString">配置文件中的数据库连接地址</param>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.#ctor(System.Data.IDbConnection)">
            <summary>
            指定dbConnection进行创建Connection对象
            </summary>
            <param name="dbConnection"></param>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.#ctor(DapperHelpers.Core.Enum.DBType,DapperHelpers.Core.Repositories.DBProvider)">
            <summary>
            数据库类型 <see cref="T:DapperHelpers.Core.Enum.DBType"/>指定<see cref="T:DapperHelpers.Core.Repositories.DBProvider"/> 进行创建Connection对象 
            </summary>
            <param name="dbType"></param>
            <param name="providers"></param>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.#ctor(DapperHelpers.Core.Enum.DBType,System.String)">
            <summary>
            数据库类型 <see cref="T:DapperHelpers.Core.Enum.DBType"/>指定数据库链接地址settingConnectionString进行创建Connection对象
            </summary>
            <param name="dbType"></param>
            <param name="settingConnectionString"></param>
        </member>
        <member name="P:DapperHelpers.DapperHelper`1.Connection">
            <summary>
            DB Connection
            </summary>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.OpenConnection(System.Data.IDbConnection)">
            <summary>
            打开数据库连接,如果关闭或者连接中断,则打开连接
            </summary>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.OpenConnection">
            <summary>
            打开数据库连接,如果关闭或者连接中断,则打开连接
            </summary>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            以指定的 System.Data.IsolationLevel 值开始一个数据库事务。
            </summary>
            <param name="il">指定连接的事务锁定行为</param>
            <returns>表示新事务的对象</returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.BeginTransaction">
            <summary>
            开始一个数据库事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.ChangeDataBase(System.String)">
            <summary>
            为打开的 Connection 对象更改当前数据库
            </summary>
            <param name="dataBaseName">要代替当前数据库进行使用的数据库的名称</param>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.CreateCommand">
            <summary>
            创建并返回一个与该连接相关联的 Command 对象
            </summary>
            <returns>一个与该连接相关联的 Command 对象</returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Query_DataTable(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Dapper 执行SQL返回DataTable类型
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Query_DataTableIn(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Query_DataTableIn 执行SQL返回DataTable类型,该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryDataTable(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Dapper 执行SQL返回DataTable类型
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryDataTableIn(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            QueryDataTableIn 执行SQL返回DataTable类型,该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Query_DataTableFirstRow(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Dapper 执行SQL返回DataTable第First行数据
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Query_DataTableInFirstRow(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Query_DataTableIn 执行SQL返回DataTable类型,该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryDataTableFirstRow(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Dapper 执行SQL返回DataTable类型
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryDataTableInFirstRow(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            QueryDataTableIn 执行SQL返回DataTable类型,该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryString(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            QueryString 执行SQL返回string类型的單個數據
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryStringIn(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            QueryStringIn 执行SQL返回String类型的單個數據,该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.DapperExecuteBatch(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}})">
            <summary>
            单条SQL，多次执行（每次执行传递数据不同），该方法执行SQL采用事务控制
            <para>
            默认调用MesCon连接字符串
            </para>
            </summary>
            <param name="sqlParamDir"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.DapperExecuteBatch(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}},System.String@)">
            <summary>
            单条SQL，多次执行（每次执行传递数据不同），该方法执行SQL采用事务控制
            <para>
            默认调用MesCon连接字符串
            </para>
            <para>
            该方法执行出现错误，可以通过Out返回错误信息
            </para>
            </summary>
            <param name="sqlParamDir"></param>
            <param name="errorMsg"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.BatchExecutionForeach(System.Collections.Generic.List{System.String})">
            <summary>
            SQL集合批量（循环）执行
            <para>
            return [Row] 表示执行成功返回受影响行数；[-1] 表示执行异常（回退异常）；
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <returns>执行状态</returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.BatchExecutionForeach(System.Collections.Generic.List{System.String},System.String@)">
            <summary>
            SQL集合批量（循环）执行
            <para>
            return [Row] 表示执行成功返回受影响行数；[-1] 表示执行异常（回退异常）；
            </para>
            <para>
            该方法执行出现错误，可以通过Out返回错误信息
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <param name="errorMsg">异常内容</param>
            <returns>执行状态</returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.BatchExecutionBeginEnd(System.Collections.Generic.List{System.String})">
            <summary>
            SQL集合拼接为字符串采用BeginEnd执行，SQL集合中的SQL必须以[;]结尾
            <para>
            return [1] 表示执行成功（提交事务）；[0] 表示执行异常（回退异常），出现异常可能为SQL集合中部分SQL语句错误，或者SQL结尾未加[;]
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <returns>执行状态</returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.BatchExecutionBeginEnd(System.Collections.Generic.List{System.String},System.String@)">
            <summary>
            SQL集合拼接为字符串采用BeginEnd执行，SQL集合中的SQL必须以[;]结尾
            <para>
            return [1] 表示执行成功（提交事务）；[0] 表示执行异常（回退异常），出现异常可能为SQL集合中部分SQL语句错误，或者SQL结尾未加[;]
            </para>
            <para>
            该方法执行出现错误，可以通过Out返回错误信息
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <param name="errorMsg">异常错误信息</param>
            <returns>执行状态</returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.BatchExecutionForeachNTS(System.Collections.Generic.List{System.String})">
            <summary>
            (无事务)SQL集合批量（循环）执行
            <para>
            return [Row] 表示执行成功返回受影响行数；执行出现异常将转抛异常
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <returns>执行完成受影响的行数</returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.BatchExecutionBeginEndNTS(System.Collections.Generic.List{System.String})">
            <summary>
            (无事务)SQL集合拼接为字符串采用BeginEnd执行，SQL集合中的SQL必须以[;]结尾
            <para>
            return [1] 表示执行成功；执行异常将抛出异常信息
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <returns>执行状态</returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.BatchExecutionForeachAsync(System.Collections.Generic.List{System.String})">
            <summary>
            SQL集合批量（循环）执行
            <para>
            return [Row] 表示执行成功返回受影响行数；[-1] 表示执行异常（回退异常）；
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <returns>执行状态</returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.BatchExecutionBeginEndAsync(System.Collections.Generic.List{System.String})">
            <summary>
            SQL集合拼接为字符串采用BeginEnd执行，SQL集合中的SQL必须以[;]结尾
            <para>
            return [1] 表示执行成功（提交事务）；[0] 表示执行异常（回退异常），出现异常可能为SQL集合中部分SQL语句错误，或者SQL结尾未加[;]
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <returns>执行状态</returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.BatchExecutionForeachAsyncNTS(System.Collections.Generic.List{System.String})">
            <summary>
            (无事务)SQL集合批量（循环）执行
            <para>
            return [Row] 表示执行成功返回受影响行数；执行出现异常将转抛异常
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <returns>执行完成受影响的行数</returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.BatchExecutionBeginEndAsyncNTS(System.Collections.Generic.List{System.String})">
            <summary>
            (无事务)SQL集合拼接为字符串采用BeginEnd执行，SQL集合中的SQL必须以[;]结尾
            <para>
            return [1] 表示执行成功；执行异常将抛出异常信息
            </para>
            </summary>
            <param name="list">SQL集合</param>
            <returns>执行状态</returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.ExecuteProcedure(System.String,Dapper.DynamicParameters)">
            <summary>
            执行存储过程
            </summary>
            <param name="ProcName">存储过程名称</param>
            <param name="dynamicParameters">存储过程参数对象（包含input，output）</param>
            <returns>执行存储过程状态</returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.ExecuteProcedure(System.String,Dapper.DynamicParameters,System.String@)">
            <summary>
            执行存储过程
            <para>
            该方法执行出现错误，可以通过Out返回错误信息
            </para>
            </summary>
            <param name="ProcName">存储过程名称</param>
            <param name="dynamicParameters">存储过程参数对象（包含input，output）</param>
            <param name="errorMsg"></param>
            <returns>执行存储过程状态</returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.ExecuteSqlListAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            ExecuteSqlListAsync,异步批量执行Sql List
            </summary>
            <param name="sqlList">SQLS对象集合</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.ExecuteSqlListAsyncResultRows(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            ExecuteSqlListAsyncResultRows,异步批量执行Sql List
            </summary>
            <param name="sqlList">SQLS对象集合</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.ExecuteSqlListAsyncNTS(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            (无事务)ExecuteSqlListAsync,异步批量执行Sql List，取消事务管理
            </summary>
            <param name="sqlList">SQLS对象集合</param>
            <returns>执行异常会抛出对应错误异常</returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.ExecuteSqlListAsyncResultRowsNTS(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            (无事务)ExecuteSqlListAsyncResultRowsNTS,异步批量执行Sql List，取消事务管理，执行成功返回受影响的行数
            </summary>
            <param name="sqlList">SQLS对象集合</param>
            <returns>执行成功返回受影响的行数，执行异常会抛出对应错误异常</returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Get(System.Object)">
            <summary>
            根据主键获取实体数据
            </summary>
            <param name="key">主键值</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Get(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
             根据主键获取实体数据
            </summary>
            <param name="key"></param>
            <param name="traction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.GetAsync(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键获取实体数据
            </summary>
            <param name="key">主键值</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Get``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键获取实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="key">主键值</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.GetAsync``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键获取实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="key">主键值</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.GetAll">
            <summary>
            获取所有的实体数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.GetAll(System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取所有的实体数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.GetAllAsync(System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Async 获取所有的实体数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.GetAll``1(System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取所有的实体数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.GetAllAsync``1(System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Async 获取所有的实体数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Insert(`0)">
            <summary>
            插入实体数据
            </summary>
            <param name="entityToInsert"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Insert(`0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            插入实体数据
            </summary>
            <param name="entityToInsert"></param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>    
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.InsertAsync(`0,System.Data.IDbTransaction,System.Nullable{System.Int32},ISqlAdapter)">
            <summary>
            Async 插入实体数据
            </summary>
            <param name="entityToInsert"></param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>    
            <param name="sqlAdapter"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Insert``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            插入实体数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityToInsert"></param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.InsertAsync``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32},ISqlAdapter)">
            <summary>
            Async 插入实体数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityToInsert"></param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="sqlAdapter"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Update(`0)">
            <summary>
            更新实体数据
            </summary>
            <param name="entityToUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Update(`0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
             更新实体数据
            </summary>
            <param name="entityToUpdate"></param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.UpdateAsync(`0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Async 更新实体数据
            </summary>
            <param name="entityToUpdate"></param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Update``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            更新实体数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityToUpdate"></param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.UpdateAsync``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Async 更新实体数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityToUpdate"></param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Delete(`0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除实体数据
            </summary>
            <param name="entityToDelete"></param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Delete(`0)">
            <summary>
             删除实体数据
            </summary>
            <param name="entityToDelete"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Delete``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除实体数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityToDelete"></param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.DeleteAsync``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Async 删除实体数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityToDelete"></param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Execute(System.String,System.Object)">
            <summary>
            执行原生sql
            </summary>
            <param name="sql">SQL脚本</param>
            <param name="param">SQL执行参数对象</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.ExecuteAsync(System.String,System.Object)">
            <summary>
            Async 执行原生sql
            </summary>
            <param name="sql">SQL脚本</param>
            <param name="param">SQL执行参数对象</param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Execute(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行原生sql
            </summary>
            <param name="sql">SQL脚本</param>
            <param name="param">SQL执行参数对象</param>
            <param name="transaction">操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.ExecuteAsync(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Async 执行原生sql
            </summary>
            <param name="sql">SQL脚本</param>
            <param name="param">SQL执行参数对象</param>
            <param name="transaction">操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Execute(DapperHelpers.Core.Models.UserCommands,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            批量执行 UserCommand
            </summary>
            <param name="commands"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Execute(System.Collections.Generic.IEnumerable{DapperHelpers.Core.Models.UserCommand},System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            批量执行 UserCommand
            </summary>
            <param name="commands"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Execute(DapperHelpers.Core.Models.UserCommand,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行UserCommand
            </summary>
            <param name="command"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.ExecuteAsync(DapperHelpers.Core.Models.UserCommand,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行UserCommand
            </summary>
            <param name="command"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Query(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询  
            </summary>
            <param name="sql">SQL脚本</param>
            <param name="param">SQL执行参数对象</param>
            <param name="transaction">操作的事务对象</param>
            <param name="buffered"></param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryAsync(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Async 查询
            </summary>
            <param name="sql">SQL脚本</param>
            <param name="param">SQL执行参数对象</param>
            <param name="transaction">操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Query``1(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询并返回指定对象
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="sql">SQL脚本</param>
            <param name="param">SQL执行参数对象</param>
            <param name="transaction">操作的事务对象</param>
            <param name="buffered"></param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryAsync``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Async 查询并返回指定对象
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="sql">SQL脚本</param>
            <param name="param">SQL执行参数对象</param>
            <param name="transaction">操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryFirst``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询并返回第一个对象  
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="sql">SQL脚本</param>
            <param name="param">SQL执行参数对象</param>
            <param name="transaction">操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryFirstAsync``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Async 查询并返回第一个对象
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="sql">SQL脚本</param>
            <param name="param">SQL执行参数对象</param>
            <param name="transaction">操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryFirstOrDefault``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询并返回第一个对象
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="sql">SQL脚本</param>
            <param name="param">SQL执行参数对象</param>
            <param name="transaction">操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryFirstOrDefaultAsync``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Async 查询并返回第一个对象 
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="sql">SQL脚本</param>
            <param name="param">SQL执行参数对象</param>
            <param name="transaction">操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryIn(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            QueryIn 该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryAsyncIn(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            QueryAsyncIn 该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryIn``1(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            QueryIn 该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryAsyncIn``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            QueryAsyncIn 该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryFirstIn``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            QueryFirstIn 该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryFirstAsyncIn``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            QueryFirstAsyncIn 该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryFirstOrDefaultIn``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            QueryFirstOrDefaultIn 该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.QueryFirstOrDefaultAsyncIn``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            QueryFirstOrDefaultAsyncIn 该函数会对入参匿名对象param进行List类型检索，当包含List参数集合时避免ListCount等于零
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:DapperHelpers.DapperHelper`1.Dispose">
            <summary>
            Connection Colse
            </summary>
        </member>
    </members>
</doc>
